name: UnitTest_and_SonarQube

# Déclencheurs du workflow :
on:
  push:
    branches:
      - main # Quand on pousse sur la branche main
  pull_request:
    types: [opened, synchronize, reopened] # Et aussi lors de certaines actions sur une PR

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest # Le job s’exécute sur une machine virtuelle Windows

    permissions:
      checks: write # autorise GitHub à écrire les résultats de test (check run)
      contents: read # autorise la lecture du contenu du dépôt

    steps:
      # Étape 1 : Installer Java (requis par SonarScanner)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      # Étape 2 : Cloner le dépôt
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important pour que SonarCloud analyse bien l'historique Git

      # Étape 3 : Cache des paquets utilisés par SonarCloud
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Étape 4 : Cache du binaire SonarScanner
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Étape 5 : Installer le scanner SonarCloud si non trouvé dans le cache
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # Étape 6 : Lancer l’analyse avec compilation + tests + couverture
      - name: Build, test and analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Token secret stocké dans les settings GitHub
        shell: powershell
        run: |
          # Lancement de l’analyse SonarCloud
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"Said-Develops_EduCaninDeploy" `
            /o:"said-develops" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

          # Compilation du projet
          dotnet build

          # ✅ Exécution des tests avec logger TRX (format reconnu par GitHub)
          # ✅ Génération des résultats dans le dossier TestResults/
          dotnet test --no-build --logger "trx;LogFileName=test-results.trx" --results-directory TestResults

          # Fin de l’analyse (et envoi des résultats à SonarCloud)
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # ✅ Étape 7 : Upload des résultats de test en tant qu'artifact téléchargeable
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results # Nom visible dans GitHub Actions
          path: TestResults/*.trx # Fichier .trx généré par dotnet test

      # ✅ Étape 8 : Publication des résultats dans l'interface GitHub Actions (onglet "Tests")
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always() # S’exécute même si des tests échouent
        with:
          name: Unit Tests # Nom du bloc dans GitHub UI
          path: TestResults/*.trx # Fichier de résultat
          reporter: dotnet-trx # Format de fichier utilisé par dotnet test
